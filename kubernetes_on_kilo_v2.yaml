heat_template_version: 2015-04-30

description: '''
  Boot a Kubernetes cluster with a single master and one or more nodes (as specified)
  OpenStack Powered Cloud.'''

parameters:

  flavor:
    description: Flavor used for instances
    label: Flavor
    type: string
    default: 2cb70964-721d-47ff-badb-b702898b6fc2
    hidden: false
    constraints:
    - custom_constraint: nova.flavor
    description: Valid flavors only

  image:
    description: Image that will be used for the nodes.
    label: Image
    type: string
    default: a27fca27-2f3c-40c2-93d0-55763ce11320
    hidden: false
    constraints: 
    - custom_constraint: glance.image
    description: Must be a valid Glance image

  k8s_node_count:
    description: Number of machines to deploy as a Kubernetes Minion
    label: Kubernetes Minion Count
    type: number
    default: 1
    hidden: false
    constraints:
    - range:
        min: 1
        max: 6
      description: Must be between 2 and 6 machines.

  ext_network:
    description: See Routers tab for name of the External Network
    type: string
    label: External Network
    default: VLAN3337
    hidden: false

  keyname:
    description: Name of keypair to be used for instance
    label: Key Pair
    type: string
    default: dtnode_key
    hidden: false
    constraints: 
    - custom_constraint: nova.keypair
    description: Must be a known keypair

  network_resource:
    description: WestGrid project network
    label: Network
    type: string
    default: a7741f95-0bc1-4424-86ef-2e8f66bcae18
    hidden: false
    constraints:
    - custom_constraint: neutron.network
    description: Must be a valid Neutron Network.

  docker_volume_size:
    type: number
    description: size of a cinder volume to allocate to docker for container/image storage
    default: 1

resources:
  ########################################
  ##  Policies, Alarm, Groups and IPs
  ########################################
  scale_up_policy:
    depends_on:
      - k8s_nodes
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: k8s_nodes }
      cooldown: 120
      scaling_adjustment: 1

  scale_down_policy:
    depends_on:
      - k8s_nodes
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: k8s_nodes }
      cooldown: 60
      scaling_adjustment: -1

  server_group:
    type: OS::Nova::ServerGroup
    properties:
      name: nova-server-group

  kube_master_floating:
    type: OS::Nova::FloatingIP
    properties:
      pool: {get_param: ext_network}

  kube_master_floating_association:
    type: OS::Nova::FloatingIPAssociation
    depends_on:
      - k8s_master
    properties:
      floating_ip: {get_resource: kube_master_floating}
      server_id: {get_resource: k8s_master}

  remote_ssh_access:
     type: OS::Neutron::SecurityGroup
     properties:
       name: remote_ssh_access
       rules:
         - remote_ip_prefix: 0.0.0.0/0
           protocol: tcp
           port_range_min: 22
           port_range_max: 22
         - remote_ip_prefix: 0.0.0.0/0
           protocol: tcp
           port_range_min: 10250
           port_range_max: 10255
         - remote_ip_prefix: 0.0.0.0/0
           protocol: tcp
           port_range_min: 2379
           port_range_max: 2380
         - remote_ip_prefix: 0.0.0.0/0
           protocol: tcp
           port_range_min: 6443
           port_range_max: 6443
         - remote_ip_prefix: 0.0.0.0/0
           protocol: tcp
           port_range_min: 30000
           port_range_max: 32767
         - remote_ip_prefix: 0.0.0.0/0
           protocol: tcp
           port_range_min: 1
           port_range_max: 65535
         - remote_ip_prefix: 0.0.0.0/0
           protocol: udp
           port_range_min: 1
           port_range_max: 65535
         - remote_ip_prefix: 0.0.0.0/0
           protocol: icmp

  ########################################
  ##  Software Config Parts (Master)
  ########################################

  ### STAGE 1 -- Boot Config and Create User
  disable_selinux:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #cloud-boothook
        #!/bin/sh
        setenforce 0
        sed -i '/^SELINUX=/ s/=.*/=disabled/' /etc/selinux/config

  kube_user:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - disable_selinux
    properties:
      group: ungrouped
      config: |
        #cloud-config
        system_info:
          users:
            - default
            - name: minion
              gecos: Kubernetes Interactive User
              groups: [wheel, adm, systemd-journal]
              lock_passwd: true
              sudo: ["ALL=(ALL) NOPASSWD:ALL"]
              shell: /bin/bash

  ### STAGE 2 -- Update Image
  upgrade:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - disable_selinux
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        dnf upgrade -y

  ### STAGE 3 -- Install Packages
  install_packages_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - upgrade
      - kube_user
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        systemctl disable firewalld
        dnf remove chrony -y
        dnf install ntp -y
        systemctl enable ntpd.service
        systemctl start ntpd.service
        sudo su -
        cat <<EOF > /etc/yum.repos.d/kubernetes.repo
        [kubernetes]
        name=Kubernetes
        baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
        enabled=1
        gpgcheck=1
        repo_gpgcheck=1
        gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        EOF
        dnf clean dbcache -y && dnf refresh -y && dnf install kubernetes flannel.x86_64 etcd.x86_64 -yb
        #dnf remove --duplicates
        dnf history

  ### STAGE 4 -- Configure Files
  configure_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - install_packages_master
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        cat <<EOF >  /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-ip6tables= 1
        net.bridge.bridge-nf-call-iptables= 1
        EOF
        sysctl --system
        cat <<EOF >> /etc/hosts
        $masterip    k8s-master.westcloud
        $masterip    k8s-master
        EOF
        sed -i 's/SELINUX=.*/SELINUX=permissive/' /etc/selinux/config
        masterip=$(ip addr show eth0 | awk '$1 == "inet" {print $2}' | cut -f1 -d/)
        #---------ETCD CONFIG:
        sed -i "s/ETCD_LISTEN_CLIENT_URLS=.*/ETCD_LISTEN_CLIENT_URLS=\"http:\/\/0.0.0.0:2379\"/" /etc/etcd/etcd.conf
        sed -i "s/ETCD_ADVERTISE_CLIENT_URLS=.*/ETCD_ADVERTISE_CLIENT_URLS=\"http:\/\/0.0.0.0:2379\"/" /etc/etcd/etcd.conf
        #---------APISERVER CONFIG:
        cat <<EOF > /etc/kubernetes/apiserver
        KUBE_API_ADDRESS="--address=0.0.0.0"
        KUBE_API_PORT="--port=8080"
        KUBELET_PORT="--kubelet-port=10250"
        KUBE_ETCD_SERVERS="--etcd-servers=http://k8s-master:2379"
        KUBE_SERVICE_ADDRESSES="--service-cluster-ip-range=10.254.0.0/16"
        KUBE_API_ARGS=""
        EOF
        #---------KUBELET CONFIG:
        sed -i 's/KUBELET_ADDRESS=.*/KUBELET_ADDRESS="--address=0.0.0.0"/' /etc/kubernetes/kubelet
        sed -i 's/KUBELET_HOSTNAME=.*/KUBELET_HOSTNAME=""/' /etc/kubernetes/kubelet
        #--------- CONFIG FILE:
        sed -i "s/KUBE_MASTER=.*/KUBE_MASTER=\"--master=http:\/\/k8s-master:8080\"/" /etc/kubernetes/config



  ### STAGE 5 -- Start Services
  enable_services_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - configure_master
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        systemctl daemon-reload
        masterip=$(ip addr show eth0 | awk '$1 == "inet" {print $2}' | cut -f1 -d/)
        for SERVICES in 
        #systemctl enable --now 
        for SERVICES in kube-proxy kubelet flanneld docker; do
          systemctl restart $SERVICES
          systemctl enable $SERVICES
          systemctl status $SERVICES
        done
        kubectl config set-cluster default-cluster --server=http://k8s-master:8080
        kubectl config set-context default-context --cluster=default-cluster --user=default-admin
        kubectl config use-context default-contexy
        #systemctl enable --now kube-controller-manager kubelet docker kube-scheduler kube-proxy
        #kubelet --logtostderr=true --v=0 --address=0.0.0.0 --allow-privileged=false --cgroup-driver=systemd --fail-swap-on=false
        #kube-controller-manager --logtostderr=true --v=0 --master=http://127.0.0.1:8080 
        #dockerd-current --add-runtime oci=/usr/libexec/docker/docker-runc-current --default-runtime=oci --authorization-plugin=rhel-push-plugin --containerd /run/containerd.sock --exec-opt native.cgroupdriver=systemd --userland-proxy-path=/usr/libexec/docker/docker-proxy-current --init-path=/usr/libexec/docker/docker-init-current --seccomp-profile=/etc/docker/seccomp.json  --log-driver=journald --live-restore --storage-driver overlay2 --add-registry docker.io --add-registry registry.fedoraproject.org --add-registry quay.io --add-registry registry.access.redhat.com --add-registry registry.centos.org
        #kube-scheduler --logtostderr=true --v=0 --master=http://127.0.0.1:8080
        #kube-proxy --logtostderr=true --v=0 --master=http://127.0.0.1:8080
        systemctl status etcd kube-apiserver kube-controller-manager kubelet docker kube-scheduler kube-proxy

  ### STAGE 6 -- Start up Flannel
  start_flannel_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - enable_services_master
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        bmk=$(ip addr show eth0 | awk '$1 == "inet" {print $4}' | cut -f2 -d/ | sed 's/\([0-9]*\.[0-9]*\.[0-9]*\.\)[0-9]*/\10/')
        FLANNEL_JSON=/etc/sysconfig/flanneld-conf.json
        cat > $FLANNEL_JSON <<EOF
        {
          "Network": "172.30.30.0/12",
          "Subnetlen": 24
          "Backend": {
            "Type": "vxlan"
          }
        }
        EOF
        curl -L --ipv4 http://localhost:2379/v2/keys/atomic.io/network/config -XPUT --data-urlencode value@/etc/sysconfig/flanneld-conf.json
        etcdctl get /atomic.io/network/config
        sed -i 's/FLANNEL_ETCD=.*/FLANNEL_ETCD="http://k8s-master:4001"/' /etc/sysconfig/flanneld
        #cat <<EOF >> /etc/sysconfig/flanneld 
        #FLANNEL_OPTIONS="--iface=eth1"
        #EOF
        systemctl daemon-reload
        systemctl restart etcd kube-apiserver kube-controller-manager kubelet docker kube-scheduler kube-proxy flanneld
        systemctl enable --now etcd kube-apiserver kube-controller-manager kubelet docker kube-scheduler kube-proxy flanneld
  ### STAGE 7 -- Addons and Run Checks And Verify
  add_ons_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - start_flannel_master
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        echo ">> Applying Addons"
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
        kubectl apply -f https://raw.githubusercontent.com/giantswarm/kubernetes-prometheus/master/manifests-all.yaml
        kubectl get all --all-namespaces=true
        echo ">> ... END Applying Addons"

  check_up_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - add_ons_master
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        echo ">> Check Up"
        echo "------------------------------------------------------"
        cat /etc/selinux/config
        echo "------------------------------------------------------"
        cat /etc/etcd/etcd.conf
        echo "------------------------------------------------------"
        cat /etc/sysconfig/flanneld
        echo "------------------------------------------------------"
        cat /etc/kubernetes/config
        echo "------------------------------------------------------"
        cat /etc/kubernetes/apiserver
        echo "------------------------------------------------------"
        cat /etc/sysconfig/flanneld-conf.json
        echo "------------------------------------------------------"
        etcdctl get /atomic.io/network/config
        echo "------------------------------------------------------"
        cat /etc/kubernetes/kubelet
        echo "------------------------------------------------------"
        whoami
        echo "------------------------------------------------------"
        hostname
        echo "------------------------------------------------------"
        ls /etc/systemd/system/*.wants/
        echo "------------------------------------------------------"
        systemctl list-dependencies
        echo "------------------------------------------------------"
        systemctl list-jobs
        echo "------------------------------------------------------"
        systemctl --state=failed
        echo "------------------------------------------------------"
        kubectl get nodes --all-namespaces=true

  ### STAGE ALT -- KUBEADM
  install_kubeadm:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - upgrade
      - kube_user
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        sudo su -;
        setenforce 0 
        cat <<EOF > /etc/yum.repos.d/kubernetes.repo
        [kubernetes]
        name=Kubernetes
        baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
        enabled=1
        gpgcheck=1
        repo_gpgcheck=1
        gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        EOF;
        dnf refresh -y && dnf install -y docker kubeadm.x86_64
        masterip=$(ip addr show eth0 | awk '$1 == "inet" {print $2}' | cut -f1 -d/) && route add 10.96.0.1 gw $masterip
        cat <<EOF >  /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        EOF
        sysctl --system
        systemctl enable --now docker kubelet
        kubeadm config images pull && kubeadm init


  ### STAGE 8 - Build
  kube_master_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: disable_selinux}
        - config: {get_resource: upgrade}
        - config: {get_resource: kube_user}
        - config: {get_resource: install_packages_master}
        - config: {get_resource: configure_master}
        - config: {get_resource: enable_services_master}
        - config: {get_resource: start_flannel_master}
        - config: {get_resource: add_ons_master}
        - config: {get_resource: check_up_master}

  ########################################
  ##  Servers
  ########################################
  k8s_master:
    type: OS::Nova::Server
    properties:
      name: k8s_master
      image:    { get_param: image   }
      flavor:   { get_param: flavor  }
      key_name: { get_param: keyname }
      networks: 
      - network: { get_param: network_resource }
      scheduler_hints: { group: { get_resource: server_group } }
      security_groups: 
      - default
      - get_resource: remote_ssh_access
      metadata: 
        kube_group: k8scluster,vault,nofloating
      user_data_format: RAW
      user_data: {get_resource: kube_master_init}

  k8s_nodes:
    type: OS::Heat::AutoScalingGroup
    depends_on:
      - k8s_master
    properties:
      min_size: 1
      desired_capacity: { get_param: k8s_node_count }
      max_size: 6
      resource:
        type: OS::Nova::Server
        properties:
          image:    { get_param: image   }
          flavor:   { get_param: flavor  }
          key_name: { get_param: keyname }
          networks: 
          - network: { get_param: network_resource }
          scheduler_hints: { group: { get_resource: server_group } }
          metadata: 
            kube_group: k8snode,k8scluster,nofloating
          # user_data_format: RAW
          # user_data:
          #   str_replace:
          #     template: |
          #       #cloud-config
          #       system_info:
          #         users:
          #           - default
          #           - name: minion
          #             gecos: Kubernetes Interactive User
          #             groups: [wheel, adm, systemd-journal]
          #             lock_passwd: true
          #             sudo: ["ALL=(ALL) NOPASSWD:ALL"]
          #             shell: /bin/bash
          #       packages:
          #         - python
          #         - kubernetes-node
          #         - flannel
          #       bootcmd:
          #         - setenforce 0 
          #         - sed -i 's/SELINUX=.*/SELINUX=permissive/' /etc/selinux/config
          #       runcmd:
          #         - sudo su -
          #         - sed -i "s/KUBE_MASTER=.*/KUBE_MASTER=\"--master=http:\/\/%masterip%:8080\"/" /etc/kubernetes/config 
          #         - sed -i "s/KUBE_API_SERVER=.*/KUBE_API_SERVER=\"--api-servers=http:\/\/%masterip%:8080\"/" /etc/kubernetes/kubelet 
          #         - sed -i 's/KUBELET_ADDRESS=.*/KUBELET_ADDRESS=\"--address=0.0.0.0\"/' /etc/kubernetes/kubelet 
          #         - sed -i 's/KUBELET_HOSTNAME=.*/KUBELET_HOSTNAME=\"\"/' /etc/kubernetes/kubelet 
          #         - sed -i "s/FLANNEL_ETCD=.*/FLANNEL_ETCD="http:\/\/%masterip%:2379\"/" /etc/sysconfig/flanneld
          #         - sed -i 's/ServiceAccount,//' /etc/kubernetes/apiserver
          #         - systemctl daemon-reload && systemctl enable --now kubelet docker kube-proxy && systemctl status kubelet docker kube-proxy
          #         - systemctl daemon-reload && systemctl enable --now flanneld && systemctl status flanneld
          #         - kubectl get all --all-namespaces=true
          #       final_message: "The system is up, after $UPTIME seconds. Master Node is @ %masterip%"
          #     params:
          #       "%masterip%": {get_attr: [kube_master_floating, ip]}

outputs:
  ssh_key_name:
    description: >
      Use this ssh in the command line script to log in to the Kubernetes master via ssh (ssh -i .ssh/<ssh_key_name>.pem fedora@<kube_masterip>).
      Get the keypair .pem file from 'Access & Security' and place in the .ssh folder on your computer.
    value: {get_param: keyname}

  kube_masterip:
    description: >
      This is the public ip address of the Kubernetes master server.
      Use this address to log in to the Kubernetes master via ssh. 
    value: {get_attr: [kube_master_floating, ip]}

  dashboard_links:
    description: > 
      Links for the various dashboards are as follows:
    value: "Pending"

  scale_up_url:
    description: >
      This URL is the webhook to scale up the autoscaling group.  You
      can invoke the scale-up operation by doing an HTTP POST to this
      URL; no body nor extra headers are needed.
    value: {get_attr: [scale_up_policy, alarm_url]}

  scale_dn_url:
    description: >
      This URL is the webhook to scale down the autoscaling group.
      You can invoke the scale-down operation by doing an HTTP POST to
      this URL; no body nor extra headers are needed.
    value: {get_attr: [scale_down_policy, alarm_url]}