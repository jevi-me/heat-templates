heat_template_version: 2015-04-30

description: '''
  Boot a Kubernetes cluster with a single master and one or more nodes (as specified)
  OpenStack Powered Cloud.'''

parameters:

  flavor:
    description: Flavor used for instances
    label: Flavor
    type: string
    default: p1-1.5gb
    hidden: false
    constraints:
    - custom_constraint: nova.flavor
    description: Valid flavors only

  image:
    description: Image that will be used for the nodes.
    label: Image
    type: string
    default: ubuntu
    hidden: false
    constraints: 
    - custom_constraint: glance.image
    description: Must be a valid Glance image

  k8s_node_count:
    description: Number of machines to deploy as a Kubernetes Minion
    label: Kubernetes Minion Count
    type: number
    default: 3
    hidden: false
    constraints:
    - range:
        min: 1
        max: 6
      description: Must be between 2 and 6 machines.

  ext_network:
    description: See Routers tab for name of the External Network
    type: string
    label: External Network
    default: VLAN3337
    hidden: false

  keyname:
    description: Name of keypair to be used for instance
    label: Key Pair
    type: string
    default: dtnode_key
    hidden: false
    constraints: 
    - custom_constraint: nova.keypair
    description: Must be a known keypair

  network_resource:
    description: WestGrid project network
    label: Network
    type: string
    default: jwe-314_network
    hidden: false
    constraints:
    - custom_constraint: neutron.network
    description: Must be a valid Neutron Network.

  docker_volume_size:
    type: number
    description: size of a cinder volume to allocate to docker for container/image storage
    default: 5

  wait_condition_timeout:
    type: number
    description : timeout for the Wait Conditions
    default: 6000

  scale_up_period_length:
    type: number
    default: 60

  scale_up_period_count:
    type: number
    default: 1

  scale_up_threshold:
    type: number
    default: 70

  scale_down_period_length:
    type: number
    default: 600

  scale_down_period_count:
    type: number
    default: 1

  scale_down_threshold:
    type: number
    default: 15

  scale_up_cooldown:
    type: number
    default: 120

  scale_down_cooldown:
    type: number
    default: 60

resources:
  ########################################
  ##  Policies and Groups
  ########################################
  scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: k8s_nodes }
      cooldown: {get_param: scale_up_cooldown}
      scaling_adjustment: 1

  scale_down_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: k8s_nodes }
      cooldown: {get_param: scale_down_cooldown}
      scaling_adjustment: -1

  server_group:
    type: OS::Nova::ServerGroup
    properties:
      name: nova-server-group

  kube_master_floating:
    type: OS::Nova::FloatingIP
    properties:
      pool: {get_param: ext_network}

  kube_master_floating_association:
    type: OS::Nova::FloatingIPAssociation
    depends_on:
      - k8s_master
    properties:
      floating_ip: {get_resource: kube_master_floating}
      server_id: {get_resource: k8s_master}

  remote_ssh_access:
     type: OS::Neutron::SecurityGroup
     properties:
       name: remote_ssh_access
       rules:
         - remote_ip_prefix: 0.0.0.0/0
           protocol: tcp
           port_range_min: 22
           port_range_max: 22

  ########################################
  ##  Software Config Parts
  ########################################

  ### STAGE 1 -- Boot config and Resources with no dependencies
  disable_selinux:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #cloud-boothook
        #!/bin/sh
        setenforce 0
        sed -i '/^SELINUX=/ s/=.*/=permissive/' /etc/selinux/config

  kube_user:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #cloud-config
        system_info:
          users:
            - default
            - name: minion
              gecos: Kubernetes Interactive User
              groups: [wheel, adm, systemd-journal]
              lock_passwd: true
              sudo: ["ALL=(ALL) NOPASSWD:ALL"]
              shell: /bin/bash

  ### STAGE 2 -- Update Image
  atomic_upgrade:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - disable_selinux
    properties:
      group: ungrouped
      config: |
        #cloud-config
        merge_how: dict(recurse_array)+list(append)
        bootcmd:
          - |
            test -f /etc/upgrade-flag ||
            { rm -rf /var/lib/cloud/instances/*;
              rpm-ostree upgrade > /var/log/ostree-upgrade.log 2>&1;
              touch /etc/upgrade-flag;
              reboot; }      

  ### STAGE 3 -- Install Packages
  install_packages_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - atomic_upgrade
      - kube_user
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        sudo su -
        dnf install python kubernetes etcd -y
        #dnf install flannel -y
        #dnf install cockpit -y

  ### STAGE 4 -- Configure Files
  configure_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - install_packages_master
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        masterip=$(ip addr show eth0 | awk '$1 == "inet" {print $2}' | cut -f1 -d/)
        cat > /etc/etcd/etcd.conf <<EOF
        # [member]
        ETCD_NAME=default
        ETCD_DATA_DIR="/var/lib/etcd/default.etcd"
        ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379"
        [cluster]
        ETCD_ADVERTISE_CLIENT_URLS="http://$masterip:2379"
        EOF
        sed -i '/^KUBE_API_ADDRESS=/ s/=.*/="--address=0.0.0.0"/' /etc/kubernetes/apiserver
        sed -i '/^KUBELET_ADDRESS=/ s/=.*/="--address=0.0.0.0"/' /etc/kubernetes/kubelet
        sed -i 's/ServiceAccount,//' /etc/kubernetes/apiserver
        sed -i '/^KUBELET_HOSTNAME=/ s/=.*/="k8s_master"/' /etc/kubernetes/kubelet

  ### STAGE 5 -- Start Services
  enable_services_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - configure_master
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        systemctl daemon-reload
        systemctl enable --now etcd kube-apiserver kube-controller-manager kube-scheduler kubelet docker kube-proxy 
        systemctl status etcd kube-apiserver kube-controller-manager kube-scheduler kubelet docker kube-proxy
        #systemctl enable --now cockpit.socket

  ### STAGE 6 -- Addons and Checkups
  add_ons_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - enable_services_master
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        echo ">> Applying Addons"
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
        kubectl apply -f https://raw.githubusercontent.com/giantswarm/kubernetes-prometheus/master/manifests-all.yaml
        kubectl get all --all-namespaces=true
        echo ">> ... END Applying Addons"

  check_up_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - add_ons_master
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        echo ">> Check Up"
        echo "------------------------------------------------------"
        cat /etc/sysconfig/heat-params
        echo "------------------------------------------------------"
        cat /etc/etcd/etcd.conf
        echo "------------------------------------------------------"
        cat /etc/sysconfig/flanneld
        echo "------------------------------------------------------"
        cat /etc/kubernetes/config
        echo "------------------------------------------------------"
        cat /etc/kubernetes/apiserver
        echo "------------------------------------------------------"
        cat /etc/sysconfig/flanneld-conf.json
        echo "------------------------------------------------------"
        etcdctl get /atomic.io/network/config
        echo "------------------------------------------------------"
        cat /etc/kubernetes/kubelet
        echo "------------------------------------------------------"
        whoami
        echo "------------------------------------------------------"
        hostname
        echo "------------------------------------------------------"
        ls /etc/systemd/system/*.wants/
        echo "------------------------------------------------------"
        systemctl list-dependencies
        echo "------------------------------------------------------"
        systemctl list-jobs
        echo "------------------------------------------------------"
        systemctl --state=failed
        echo "------------------------------------------------------"
        kubectl get nodes --all-namespaces=true

  ########################################
  ##  Software Config Init
  ########################################
  kube_master_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: disable_selinux}
        - config: {get_resource: atomic_upgrade}
        - config: {get_resource: kube_user}
        - config: {get_resource: install_packages_master}
        - config: {get_resource: configure_master}
        - config: {get_resource: enable_services_master}
        - config: {get_resource: check_up_master}

  ########################################
  ##  Servers
  ########################################
  k8s_master:
    type: OS::Nova::Server
    properties:
      name: k8s_master
      image:    { get_param: image   }
      flavor:   { get_param: flavor  }
      key_name: { get_param: keyname }
      networks: 
      - network: { get_param: network_resource }
      scheduler_hints: { group: { get_resource: server_group } }
      security_groups: 
      - default
      - get_resource: remote_ssh_access
      metadata: 
        kube_group: k8scluster,vault,nofloating
      user_data_format: RAW
      user_data: {get_resource: kube_master_init}

  k8s_nodes:
    type: OS::Heat::AutoScalingGroup
    depends_on:
      - k8s_master
    properties:
      min_size: 1
      desired_capacity: { get_param: k8s_node_count }
      max_size: 6
      resource:
        type: OS::Nova::Server
        properties:
          image:    { get_param: image   }
          flavor:   { get_param: flavor  }
          key_name: { get_param: keyname }
          networks: 
          - network: { get_param: network_resource }
          scheduler_hints: { group: { get_resource: server_group } }
          metadata: 
            kube_group: k8snode,k8scluster,nofloating
          user_data_format: RAW
          user_data:
            str_replace:
              template: |
                #cloud-config
                system_info:
                  users:
                    - default
                    - name: minion
                      gecos: Kubernetes Interactive User
                      groups: [wheel, adm, systemd-journal]
                      lock_passwd: true
                      sudo: ["ALL=(ALL) NOPASSWD:ALL"]
                      shell: /bin/bash
                package_update: true
                packages:
                  - python
                  - kubernetes-node
                package_upgrade: true
                bootcmd:
                  - setenforce 0 
                  - sed -i '/^SELINUX=/ s/=.*/=permissive/' /etc/selinux/config
                runcmd:
                  - sudo su -
                  - sed -i 's/^KUBE_MASTER=.*/KUBE_MASTER="--master=http://%masterip%:8080"/'      /etc/kubernetes/config 
                  - sed -i 's/^KUBE_API_SERVER=.*/KUBE_API_SERVER="--api-servers=http://%masterip%:8080"/' /etc/kubernetes/kubelet 
                  - sed -i 's/^KUBELET_ADDRESS=.*/KUBELET_ADDRESS="--address=0.0.0.0"/'                    /etc/kubernetes/kubelet 
                  - sed -i 's/^KUBELET_HOSTNAME=.*/KUBELET_HOSTNAME=""/'                                     /etc/kubernetes/kubelet 
                  - systemctl daemon-reload && systemctl enable --now kubelet docker kube-proxy && systemctl status kubelet docker kube-proxy
                final_message: "The system is finally up, after $UPTIME seconds. %masterip%"
              params:
                "%masterip%": {get_attr: [kube_master_floating, ip]}

outputs:

  kube_master:
    value: {get_attr: [kube_master_floating, ip]}
    description: >
      This is the public ip address of the Kubernetes master server.
      Use this address to log in to the Kubernetes master via ssh or
      to access the Kubernetes API from outside the cluster.
  dashboard_links:
    value: "Pending"
    description: > 
      Links for the various dashboards are as follows:
