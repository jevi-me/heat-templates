heat_template_version: 2015-04-30

description: '''
  Boot a Kubernetes cluster with a single master and one or more nodes (as specified)
  OpenStack Powered Cloud.'''

parameters:

  flavor:
    description: Flavor used for instances
    label: Flavor
    type: string
    default: p1-1.5gb
    hidden: false
    constraints:
    - custom_constraint: nova.flavor
    description: Valid flavors only

  image:
    description: Image that will be used for the nodes.
    label: Image
    type: string
    default: ubuntu
    hidden: false
    constraints: 
    - custom_constraint: glance.image
    description: Must be a valid Glance image

  k8s_node_count:
    description: Number of machines to deploy as a Kubernetes Minion
    label: Kubernetes Minion Count
    type: number
    default: 3
    hidden: false
    constraints:
    - range:
        min: 1
        max: 6
      description: Must be between 2 and 6 machines.

  keyname:
    description: Name of keypair to be used for instance
    label: Key Pair
    type: string
    default: dtnode_key
    hidden: false
    constraints: 
    - custom_constraint: nova.keypair
    description: Must be a known keypair

  network_resource:
    description: WestGrid project network
    label: Network
    type: string
    default: jwe-314_network
    hidden: false
    constraints:
    - custom_constraint: neutron.network
    description: Must be a valid Neutron Network.

  docker_volume_size:
    type: number
    description: size of a cinder volume to allocate to docker for container/image storage
    default: 5

  wait_condition_timeout:
    type: number
    description : timeout for the Wait Conditions
    default: 6000

  scale_up_period_length:
    type: number
    default: 60

  scale_up_period_count:
    type: number
    default: 1

  scale_up_threshold:
    type: number
    default: 70

  scale_down_period_length:
    type: number
    default: 600

  scale_down_period_count:
    type: number
    default: 1

  scale_down_threshold:
    type: number
    default: 15

  scale_up_cooldown:
    type: number
    default: 120

  scale_down_cooldown:
    type: number
    default: 60

resources:
  ########################################
  ##  Policies and Groups
  ########################################
  scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: k8s_node }
      cooldown: {get_param: scale_up_cooldown}
      scaling_adjustment: 1

  scale_down_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: k8s_node }
      cooldown: {get_param: scale_down_cooldown}
      scaling_adjustment: -1

  server_group:
    type: OS::Nova::ServerGroup
    properties:
      name: nova-server-group

  ########################################
  ##  Software Config Parts
  ########################################

  ### STAGE 1 - Boot config and Resources with no dependencies
  disable_selinux:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #cloud-boothook
        #!/bin/sh
        setenforce 0
        sed -i '
          /^SELINUX=/ s/=.*/=permissive/
        ' /etc/selinux/config
        READYTOENABLE=false

  ### STAGE 2 -- Update Image
  atomic_upgrade:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - disable_selinux
    properties:
      group: ungrouped
      config: |
        #cloud-config
        merge_how: dict(recurse_array)+list(append)
        bootcmd:
          - |
            test -f /etc/upgrade-flag ||
            { rm -rf /var/lib/cloud/instances/*;
              rpm-ostree upgrade > /var/log/ostree-upgrade.log 2>&1;
              touch /etc/upgrade-flag;
              reboot; }      

  ### STAGE 3 -- Install Packages
  install_packages_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - atomic_upgrade
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        sudo su -
        dnf install kubernetes etcd flannel -y

  install_packages_minons:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - atomic_upgrade
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        sudo su -
        dnf install kubernetes-node flannel -y

  ### STAGE 4 -- Configure Files (ETCD/APISERVER)
  configure_etcd_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - install_packages_master
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        myip=$(ip addr show eth0 |
        awk '$1 == "inet" {print $2}' | cut -f1 -d/)
        cat > /etc/etcd/etcd.conf <<EOF
        # [member]
        ETCD_NAME=default
        ETCD_DATA_DIR="/var/lib/etcd/default.etcd"
        ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379"
        [cluster]
        ETCD_ADVERTISE_CLIENT_URLS="http://$myip:2379"
        EOF

  configure_kubernetes_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - install_packages_master
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        . /etc/sysconfig/heat-params
        sed -i '
          /^KUBE_API_ADDRESS=/ s/=.*/="--address=0.0.0.0"/
        ' /etc/kubernetes/apiserver
        sed -i '/ServiceAccount,//' /etc/kubernetes/apiserver

  ### THIS PIECE WAS HARDCODED. Network Variable was hardcoded!!!! #TODO

  configure_flannel_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - install_packages_master
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        FLANNEL_JSON=/etc/sysconfig/flanneld-conf.json
        cat > $FLANNEL_JSON <<EOF
        {
          "Network": "192.168.17.0/12",
          "Subnetlen": 24
          "Backend": {
            "Type": "vxlan"
          }
        }
        EOF
        curl -L http://localhost:2379/v2/keys/atomic.io/network/config -XPUT --data-urlencode value@/etc/sysconfig/flanneld-conf.json
        etcdctl get /atomic.io/network/config
        READYTOENABLE=true

  ## STAGE 5 -- Start Services
  enable_services_master:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - configure_flannel_master
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        echo "READYTOENABLE=" READYTOENABLE
        systemctl daemon-reload
        systemctl enable --now etcd kube-apiserver kube-controller-manager kube-scheduler kubelet docker kube-proxy flanneld
        systemctl status etcd kube-apiserver kube-controller-manager kube-scheduler kubelet docker kube-proxy flanneld

  ### STAGE 6 -- Addons and Checkups
  add_ons:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - enable_services_master
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        echo ">> Applying Addons"
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
        kubectl apply -f https://raw.githubusercontent.com/giantswarm/kubernetes-prometheus/master/manifests-all.yaml
        kubectl get all --all-namespaces=true
        echo ">> ... END Applying Addons"

  check_up:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - add_ons
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        echo ">> Check Up"
        echo "------------------------------------------------------"
        cat /etc/sysconfig/heat-params
        echo "------------------------------------------------------"
        cat /etc/etcd/etcd.conf
        echo "------------------------------------------------------"
        cat /etc/sysconfig/flanneld
        echo "------------------------------------------------------"
        cat /etc/kubernetes/config
        echo "------------------------------------------------------"
        cat /etc/kubernetes/apiserver
        echo "------------------------------------------------------"
        cat /etc/sysconfig/flanneld-conf.json
        echo "------------------------------------------------------"
        etcdctl get /atomic.io/network/config
        echo "------------------------------------------------------"
        whoami
        echo "------------------------------------------------------"
        hostname
        echo "------------------------------------------------------"

  ########################################
  ##  Software Config Init
  ########################################
  kube_master_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: disable_selinux}
        - config: {get_resource: atomic_upgrade}
        - config: {get_resource: install_packages_master
        - config: {get_resource: configure_etcd_master}
        - config: {get_resource: configure_kubernetes_master}
        - config: {get_resource: configure_flannel_master}
        - config: {get_resource: enable_services_master}
        - config: {get_resource: add_ons}
        - config: {get_resource: check_up}


  kube_node_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: disable_selinux}
        - config: {get_resource: atomic_upgrade}

  ########################################
  ##  Servers
  ########################################
  k8s_master:
    type: OS::Nova::Server
    properties:
      name: k8s_master
      image:    { get_param: image   }
      flavor:   { get_param: flavor  }
      key_name: { get_param: keyname }
      networks: 
      - network: { get_param: network_resource }
      scheduler_hints: { group: { get_resource: server_group } }
      metadata: 
        kube_group: k8scluster,vault,nofloating
      user_data_format: RAW
      user_data: {get_resource: kube_master_init}

  k8s_node:
    type: OS::Heat::AutoScalingGroup
    depends_on:
      - k8s_master
    properties:
      min_size: 1
      desired_capacity: { get_param: k8s_node_count }
      max_size: 6
      resource:
        type: OS::Nova::Server
        properties:
          image:    { get_param: image   }
          flavor:   { get_param: flavor  }
          key_name: { get_param: keyname }
          networks: 
          - network: { get_param: network_resource }
          scheduler_hints: { group: { get_resource: server_group } }
          metadata: 
            kube_group: k8snode,k8scluster,nofloating
          #user_data_format: RAW
          #user_data: {get_resource: kube_node_init}