heat_template_version: 2015-04-30

description: '''
  Deploy Kubernetes on a CoreOS cluster that operates on an
  OpenStack Powered Cloud.'''

parameters:

  flavor:
    description: Flavor used for instances
    label: Flavor
    type: string
    default: p1-1.5gb
    hidden: false
    constraints:
    - custom_constraint: nova.flavor
    description: Valid flavors only

  image:
    description: Image that will be used for the nodes.
    label: Image
    type: string
    hidden: false
    constraints: 
    - custom_constraint: glance.image
    description: Must be a valid Glance image

  k8s_node_count:
    description: Number of machines to deploy as a Kubernetes Minion
    label: Kubernetes Minion Count
    type: number
    default: 3
    hidden: false
    constraints:
    - range:
        min: 1
        max: 6
      description: Must be between 2 and 6 machines.

  keyname:
    description: Name of keypair to be used for instance
    label: Key Pair
    type: string
    default: dtnode_key
    hidden: false
    constraints: 
    - custom_constraint: nova.keypair
    description: Must be a known keypair

  timeout:
    description: Wait condition timeout seconds
    label: Timeout (seconds)
    type: number
    default: 600
    hidden: false

  network_resource:
    description: WestGrid project network
    label: Network
    type: string
    default: jwe-314_network
    hidden: false
    constraints:
    - custom_constraint: neutron.network
    description: Must be a valid Neutron Network.

resources:

  install_dependencies:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/bash -x
        cat /etc/hostname
        cat /etc/hosts
        sudo apt-get update && apt-get install -y apt-transport-https
        sudo apt install docker.io
        sudo systemctl start docker
        sudo systemctl enable docker

  install_kubernetes:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/sh -x
        sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add 
        deb http://apt.kubernetes.io/ kubernetes-xenial main 
        apt-get update
        apt-get install -y kubelet kubeadm kubectl kubernetes-cni

  initialise_master:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/sh -x
        sudo kubeadm init
        mkdir -p $HOME/.kube
        sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        sudo chown $(id -u):$(id -g) $HOME/.kube/config
        sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
        sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/k8s-manifests/kube-flannel-rbac.yml

  config_master:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: install_dependencies}
      - config: {get_resource: install_kubernetes}
      - config: {get_resource: initialise_master}

  config_minion:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: install_dependencies}
      - config: {get_resource: install_kubernetes}

  config_bastion:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: install_dependencies}
      - config: {get_resource: install_kubernetes}

  config_etcd:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: install_dependencies}
      - config: {get_resource: install_kubernetes}

  bastion:
    type: OS::Nova::Server
    properties:
      name: bastion
      image:    { get_param: image   }
      flavor:   { get_param: flavor  }
      key_name: { get_param: keyname }
      networks: 
      - network: { get_param: network_resource }
      scheduler_hints: { group: { get_resource: server_group } }
      metadata: 
        kube_group: bastion
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: config_bastion}

  etcd:
    type: OS::Nova::Server
    properties:
      name: etcd
      image:    { get_param: image   }
      flavor:   { get_param: flavor  }
      key_name: { get_param: keyname }
      networks: 
      - network: { get_param: network_resource }
      scheduler_hints: { group: { get_resource: server_group } }
      metadata: 
        kube_group: etcd,nofloating
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: config_etcd}

  k8s_master:
    type: OS::Nova::Server
    properties:
      name: k8s_master
      image:    { get_param: image   }
      flavor:   { get_param: flavor  }
      key_name: { get_param: keyname }
      networks: 
      - network: { get_param: network_resource }
      scheduler_hints: { group: { get_resource: server_group } }
      metadata: 
        kube_group: k8scluster,vault,nofloating
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: config_master}

  k8s_node:
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: 1
      desired_capacity: { get_param: k8s_node_count }
      max_size: 6
      resource:
        type: OS::Nova::Server
        properties:
          name: k8s_node_%index%
          image:    { get_param: image   }
          flavor:   { get_param: flavor  }
          key_name: { get_param: keyname }
          networks: 
          - network: { get_param: network_resource }
          scheduler_hints: { group: { get_resource: server_group } }
          metadata: 
            kube_group: k8snode,k8scluster,nofloating
          user_data_format: SOFTWARE_CONFIG
          user_data: {get_resource: config_minion}

  server_group:
    type: OS::Nova::ServerGroup
    properties:
      name: nova-server-group

  scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: k8s_node }
      cooldown: 60
      scaling_adjustment: '1'

  scale_down_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: k8s_node }
      cooldown: 60
      scaling_adjustment: '-1'