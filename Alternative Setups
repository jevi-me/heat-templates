  ### ALTERNATIVE 1
  common:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #cloud-config
        packages:
          - git
        package_reboot_if_required: false
        manage_resolv_conf: true
        runcmd:
          - echo "127.0.0.1 $(hostname)" | sudo tee -a /etc/hosts
        write_files:
          - path: /tmp/install.sh
            permissions: 0755
            content: |
              #!/bin/bash
              git clone https://github.com/data-8/kubeadm-bootstrap.git /tmp/kubeadm-bootstrap
              cd /tmp/kubeadm-bootstrap
              sudo ./install-kubeadm.bash
        disable_ec2_metadata: true
        timezone: "America/Montreal"
        output: { all: "| tee -a /var/log/cloud-init-output.log" }

  master:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #cloud-config
        packages:
          - nfs-kernel-server
        runcmd:
          # NFS
          - echo "/shared `hostname -I | awk '{print $1}' | grep -Po '(\d+\.){3}'`0/24(rw,sync,no_root_squash,no_all_squash)" > /etc/exports
          - mkdir -p /shared
          - chown ${admin_user} /shared
          - systemctl enable nfs-kernel-server
          - systemctl restart nfs-kernel-server
          # Kubeadm  
          - echo "SUDO_UID=${admin_user} sudo -E /tmp/kubeadm-bootstrap/init-master.bash" >> /tmp/install.sh
          - su ${admin_user} -c "/tmp/install.sh"
          - kubeadm token create --print-join-command > /shared/kubeadm-join.bash
          - kubectl label nodes `hostname` type=production  

  node:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #cloud-config
        packages:
          - nfs-common
        runcmd:
          # NFS
          - mkdir -p /shared
          - echo "${master_ip}:/shared      /shared      nfs rw,noatime,nolock,hard,tcp 0 0" >> /etc/fstab
          - mount -a
          # Kubeadm  
          - echo "while [ ! -f /shared/kubeadm-join.bash ]; do sleep 1; done; sudo bash /shared/kubeadm-join.bash" >> /tmp/install.sh
          - su ${admin_user} -c "/tmp/install.sh"

  ### ALTERNATIVE 2
  master_fed:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        sudo atomic host upgrade --reboot
        atomic install --system --system-package=no --name kube-apiserver registry.fedoraproject.org/f26/kubernetes-apiserver
        atomic install --system --system-package=no --name kube-controller-manager registry.fedoraproject.org/f26/kubernetes-controller-manager
        atomic install --system --system-package=no --name kube-scheduler registry.fedoraproject.org/f26/kubernetes-scheduler

  node_fed:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        sudo atomic host upgrade --reboot
        atomic install --system --system-package=no --name kubelet registry.fedoraproject.org/f26/kubernetes-kubelet
        atomic install --system --system-package=no --name kubelet registry.fedoraproject.org/f26/kubernetes-kubelet

  ### ALTERNATIVE 3
  master_fed:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        apt-get update && apt-get install -y apt-transport-https curl
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
        cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
        deb http://apt.kubernetes.io/ kubernetes-xenial main
        EOF
        apt-get update
        apt-get install -y kubelet kubeadm kubectl
        apt-mark hold kubelet kubeadm kubectl
        systemctl daemon-reload
        systemctl restart kubelet
        kubeadm config images pull
        kubeadm init

  master_fed:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |





  ## ALTERNATIVE 1
  kube_master_init_with_kubeadm_ubun:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: common}
        - config: {get_resource: master}

  kube_node_init_with_kubeadm_ubun:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: common}
        - config: {get_resource: master}

  ## ALTERNATIVE 2
  kube_master_init_with_kubeadm_fed:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource:master_fed:}

  kube_node_init_with_kubeadm_fed:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource:node_fed:}


########################################
  ##  Software Config: Using KubeAdm (Fedora)
  ########################################
  k_master_node_f:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        cat <<EOF > /etc/yum.repos.d/kubernetes.repo
        [kubernetes]
        name=Kubernetes
        baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
        enabled=1
        gpgcheck=1
        repo_gpgcheck=1
        gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        EOF
        setenforce 0
        dnf install -y docker kubelet kubeadm kubectl kubernetes
        systemctl enable --now docker kubelet
        kubeadm init --pod-network-cidr=10.244.0.0/16
        kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
        watch kubectl get pods --all-namespaces

  k_minion_node_f:
    type: OS::Heat::SoftwareConfig
    depends_on:
      - docker_service
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        cat <<EOF > /etc/yum.repos.d/kubernetes.repo
        [kubernetes]
        name=Kubernetes
        baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
        enabled=1
        gpgcheck=1
        repo_gpgcheck=1
        gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        EOF
        setenforce 0
        dnf install -y docker kubelet kubeadm kubectl kubernetes
        systemctl enable --now docker kubelet
        echo "use kubeadm join... in command line"


  ########################################
  ##  Software Config: Using KubeAdm (Ubuntu)
  ##  https://www.digitalocean.com/community/tutorials/how-to-create-a-kubernetes-1-10-cluster-using-kubeadm-on-ubuntu-16-04
  ########################################
  kube_initial:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #cloud-init
        - hosts: all
        become: yes
        tasks:
          - name: create the 'ubuntu' user
            user: name=ubuntu append=yes state=present createhome=yes shell=/bin/bash
          - name: allow 'ubuntu' to have passwordless sudo
            lineinfile:
              dest: /etc/sudoers
              line: 'ubuntu ALL=(ALL) NOPASSWD: ALL'
              validate: 'visudo -cf %s'
          - name: set up authorized keys for the ubuntu user
            authorized_key: user=ubuntu key="{{item}}"
            with_file:
              - ~/.ssh/id_rsa.pub

  kube_dependencies:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #cloud-init
        - hosts: all
          become: yes
          tasks:
           - name: install Docker
             apt:
               name: docker.io
               state: present
               update_cache: true
           - name: install APT Transport HTTPS
             apt:
               name: apt-transport-https
               state: present
           - name: add Kubernetes apt-key
             apt_key:
               url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
               state: present
           - name: add Kubernetes' APT repository
             apt_repository:
              repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
              state: present
              filename: 'kubernetes'
           - name: install kubelet
             apt:
               name: kubelet
               state: present
               update_cache: true
           - name: install kubeadm
             apt:
               name: kubeadm
               state: present
        - hosts: master
          become: yes
          tasks:
           - name: install kubectl
             apt:
               name: kubectl
               state: present

  kube_master:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #cloud-init
        - hosts: master
            become: yes
            tasks:
              - name: initialize the cluster
                shell: kubeadm init --pod-network-cidr=10.244.0.0/16 >> cluster_initialized.txt
                args:
                  chdir: $HOME
                  creates: cluster_initialized.txt
              - name: create .kube directory
                become: yes
                become_user: ubuntu
                file:
                  path: $HOME/.kube
                  state: directory
                  mode: 0755
              - name: copy admin.conf to user's kube config
                copy:
                  src: /etc/kubernetes/admin.conf
                  dest: /home/ubuntu/.kube/config
                  remote_src: yes
                  owner: ubuntu
              - name: install Pod network
                become: yes
                become_user: ubuntu
                shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml >> pod_network_setup.txt
                args:
                  chdir: $HOME
                  creates: pod_network_setup.txt

  kube_worker:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #cloud-init
        - hosts: master
          become: yes
          gather_facts: false
          tasks:
            - name: get join command
              shell: kubeadm token create --print-join-command
              register: join_command_raw
            - name: set join command
              set_fact:
                join_command: "{{ join_command_raw.stdout_lines[0] }}"
        - hosts: workers
          become: yes
          tasks:
            - name: join cluster
              shell: "{{ hostvars['master'].join_command }} >> node_joined.txt"
              args:
                chdir: $HOME
                creates: node_joined.txt